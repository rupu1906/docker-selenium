{
  "uid" : "90364937b93ecdd9",
  "name" : "Home page - smoke test",
  "fullName" : "tests.ui.test_search.TestWeb#test_homepage_title",
  "historyId" : "65fd2b4dfcf9c1e5ba26298719a99a88",
  "time" : {
    "start" : 1649107300763,
    "stop" : 1649107300763,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x559891f03ad3 <unknown>\n#1 0x559891c63568 <unknown>\n#2 0x559891c86b37 <unknown>\n#3 0x559891c8223a <unknown>\n#4 0x559891cbd2ba <unknown>\n#5 0x559891cb74e3 <unknown>\n#6 0x559891c8cd1a <unknown>\n#7 0x559891c8de75 <unknown>\n#8 0x559891f31efd <unknown>\n#9 0x559891f4b19b <unknown>\n#10 0x559891f33c65 <unknown>\n#11 0x559891f4bec8 <unknown>\n#12 0x559891f27360 <unknown>\n#13 0x559891f67a68 <unknown>\n#14 0x559891f67be8 <unknown>\n#15 0x559891f817fd <unknown>\n#16 0x7fabf5d65609 <unknown>",
  "statusTrace" : "request = <SubRequest 'web_setup' for <Function test_homepage_title>>\nbrowser = 'chrome'\n\n    @pytest.fixture\n    def web_setup(request, browser):\n        host = request.config.getoption(\"--host\")\n        port = request.config.getoption(\"--port\")\n        caps = request.config.getoption(\"--browser\")\n        if request.config.getoption(\"--remote\") != \"False\":\n            driver = webdriver.Remote(\n                f\"http://{host}:{port}/wd/hub\",\n                desired_capabilities=DriverExtensions.get_remote_browser(caps),\n            )\n        else:\n>           driver = DriverExtensions.get_browser_driver(browser, web_config)\n\ntests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/PracticeTests/helpers/driver.py:19: in get_browser_driver\n    chrome_driver = webdriver.Chrome(\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:268: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:359: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4cf1ae20e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x559891f67be8 \\\\u003Cunknown>\\\\n#15 0x559891f817fd \\\\u003Cunknown>\\\\n#16 0x7fabf5d65609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x559891f03ad3 <unknown>\nE       #1 0x559891c63568 <unknown>\nE       #2 0x559891c86b37 <unknown>\nE       #3 0x559891c8223a <unknown>\nE       #4 0x559891cbd2ba <unknown>\nE       #5 0x559891cb74e3 <unknown>\nE       #6 0x559891c8cd1a <unknown>\nE       #7 0x559891c8de75 <unknown>\nE       #8 0x559891f31efd <unknown>\nE       #9 0x559891f4b19b <unknown>\nE       #10 0x559891f33c65 <unknown>\nE       #11 0x559891f4bec8 <unknown>\nE       #12 0x559891f27360 <unknown>\nE       #13 0x559891f67a68 <unknown>\nE       #14 0x559891f67be8 <unknown>\nE       #15 0x559891f817fd <unknown>\nE       #16 0x7fabf5d65609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1649107300825,
      "stop" : 1649107300825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web_setup",
    "time" : {
      "start" : 1649107300825,
      "stop" : 1649107302390,
      "duration" : 1565
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x559891f03ad3 <unknown>\n#1 0x559891c63568 <unknown>\n#2 0x559891c86b37 <unknown>\n#3 0x559891c8223a <unknown>\n#4 0x559891cbd2ba <unknown>\n#5 0x559891cb74e3 <unknown>\n#6 0x559891c8cd1a <unknown>\n#7 0x559891c8de75 <unknown>\n#8 0x559891f31efd <unknown>\n#9 0x559891f4b19b <unknown>\n#10 0x559891f33c65 <unknown>\n#11 0x559891f4bec8 <unknown>\n#12 0x559891f27360 <unknown>\n#13 0x559891f67a68 <unknown>\n#14 0x559891f67be8 <unknown>\n#15 0x559891f817fd <unknown>\n#16 0x7fabf5d65609 <unknown>\n\n",
    "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/docker-selenium/docker-selenium/tests/conftest.py\", line 49, in web_setup\n    driver = DriverExtensions.get_browser_driver(browser, web_config)\n  File \"/home/runner/work/docker-selenium/docker-selenium/src/PracticeTests/helpers/driver.py\", line 19, in get_browser_driver\n    chrome_driver = webdriver.Chrome(\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py\", line 70, in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py\", line 93, in __init__\n    RemoteWebDriver.__init__(\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 268, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 359, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 424, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1649107300764,
      "stop" : 1649107300825,
      "duration" : 61
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x559891f03ad3 <unknown>\n#1 0x559891c63568 <unknown>\n#2 0x559891c86b37 <unknown>\n#3 0x559891c8223a <unknown>\n#4 0x559891cbd2ba <unknown>\n#5 0x559891cb74e3 <unknown>\n#6 0x559891c8cd1a <unknown>\n#7 0x559891c8de75 <unknown>\n#8 0x559891f31efd <unknown>\n#9 0x559891f4b19b <unknown>\n#10 0x559891f33c65 <unknown>\n#11 0x559891f4bec8 <unknown>\n#12 0x559891f27360 <unknown>\n#13 0x559891f67a68 <unknown>\n#14 0x559891f67be8 <unknown>\n#15 0x559891f817fd <unknown>\n#16 0x7fabf5d65609 <unknown>",
    "statusTrace" : "request = <SubRequest 'web_setup' for <Function test_homepage_title>>\nbrowser = 'chrome'\n\n    @pytest.fixture\n    def web_setup(request, browser):\n        host = request.config.getoption(\"--host\")\n        port = request.config.getoption(\"--port\")\n        caps = request.config.getoption(\"--browser\")\n        if request.config.getoption(\"--remote\") != \"False\":\n            driver = webdriver.Remote(\n                f\"http://{host}:{port}/wd/hub\",\n                desired_capabilities=DriverExtensions.get_remote_browser(caps),\n            )\n        else:\n>           driver = DriverExtensions.get_browser_driver(browser, web_config)\n\ntests/conftest.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/PracticeTests/helpers/driver.py:19: in get_browser_driver\n    chrome_driver = webdriver.Chrome(\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:268: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:359: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4cf1ae20e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#14 0x559891f67be8 \\\\u003Cunknown>\\\\n#15 0x559891f817fd \\\\u003Cunknown>\\\\n#16 0x7fabf5d65609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x559891f03ad3 <unknown>\nE       #1 0x559891c63568 <unknown>\nE       #2 0x559891c86b37 <unknown>\nE       #3 0x559891c8223a <unknown>\nE       #4 0x559891cbd2ba <unknown>\nE       #5 0x559891cb74e3 <unknown>\nE       #6 0x559891c8cd1a <unknown>\nE       #7 0x559891c8de75 <unknown>\nE       #8 0x559891f31efd <unknown>\nE       #9 0x559891f4b19b <unknown>\nE       #10 0x559891f33c65 <unknown>\nE       #11 0x559891f4bec8 <unknown>\nE       #12 0x559891f27360 <unknown>\nE       #13 0x559891f67a68 <unknown>\nE       #14 0x559891f67be8 <unknown>\nE       #15 0x559891f817fd <unknown>\nE       #16 0x7fabf5d65609 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8b58e0e9f28ac3c6",
      "name" : "log",
      "source" : "8b58e0e9f28ac3c6.txt",
      "type" : "text/plain",
      "size" : 589
    }, {
      "uid" : "b9d96cedd431e161",
      "name" : "stderr",
      "source" : "b9d96cedd431e161.txt",
      "type" : "text/plain",
      "size" : 408
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('web_setup')"
  }, {
    "name" : "parentSuite",
    "value" : "tests.ui"
  }, {
    "name" : "suite",
    "value" : "test_search"
  }, {
    "name" : "subSuite",
    "value" : "TestWeb"
  }, {
    "name" : "host",
    "value" : "fv-az397-767"
  }, {
    "name" : "thread",
    "value" : "3481-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.ui.test_search"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 4,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "2eef5f1610afdbd1",
        "reportUrl" : "https://rupu1906.github.io/docker-selenium/7//#testresult/2eef5f1610afdbd1",
        "status" : "passed",
        "time" : {
          "start" : 1649106452311,
          "stop" : 1649106453097,
          "duration" : 786
        }
      }, {
        "uid" : "17ba9ec2f1b1e3fc",
        "reportUrl" : "https://rupu1906.github.io/docker-selenium/6//#testresult/17ba9ec2f1b1e3fc",
        "status" : "passed",
        "time" : {
          "start" : 1649106437452,
          "stop" : 1649106438131,
          "duration" : 679
        }
      }, {
        "uid" : "c5d7fcbade183839",
        "reportUrl" : "https://rupu1906.github.io/docker-selenium/5//#testresult/c5d7fcbade183839",
        "status" : "passed",
        "time" : {
          "start" : 1649106384201,
          "stop" : 1649106384935,
          "duration" : 734
        }
      }, {
        "uid" : "e986e97d201592be",
        "reportUrl" : "https://rupu1906.github.io/docker-selenium/4//#testresult/e986e97d201592be",
        "status" : "passed",
        "time" : {
          "start" : 1649105934700,
          "stop" : 1649105935434,
          "duration" : 734
        }
      }, {
        "uid" : "e28ca54c453a945b",
        "reportUrl" : "https://rupu1906.github.io/docker-selenium/3//#testresult/e28ca54c453a945b",
        "status" : "broken",
        "statusDetails" : "NameError: name 'webdriver' is not defined",
        "time" : {
          "start" : 1649105743161,
          "stop" : 1649105743161,
          "duration" : 0
        }
      }, {
        "uid" : "92d52fe764934efa",
        "reportUrl" : "https://rupu1906.github.io/docker-selenium/2//#testresult/92d52fe764934efa",
        "status" : "broken",
        "statusDetails" : "ValueError: no option named '--host'",
        "time" : {
          "start" : 1649105572847,
          "stop" : 1649105572847,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ "@pytest.mark.usefixtures('web_setup')" ]
  },
  "source" : "90364937b93ecdd9.json",
  "parameterValues" : [ ]
}